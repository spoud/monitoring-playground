apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: cluster
  namespace: monitoring
spec:
  mode: daemonset
  image: otel/opentelemetry-collector-k8s:0.98.0
  serviceAccount: cluster-otel-collector
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    extensions:
      health_check: {}

    receivers:
      kubeletstats:
        collection_interval: 20s
        initial_delay: 1s
        auth_type: "serviceAccount"
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
        metric_groups:
          - node
          - pod
          - container
        extra_metadata_labels:
          - container.id
          - k8s.volume.type
        k8s_api_config:
          auth_type: serviceAccount
      k8s_cluster:
        collection_interval: 20s

    processors:
      batch:
        timeout: 200ms
      memory_limiter:
        check_interval: 5s
        limit_mib: 1500
        spike_limit_mib: 512

      transform/kubelet-metric-labels:
        error_mode: ignore
        metric_statements:
        - context: datapoint
          statements:
          - set(attributes["pod"], resource.attributes["k8s.pod.name"])
          - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
          - set(attributes["container"], resource.attributes["k8s.container.name"])
          - set(attributes["node"], resource.attributes["k8s.node.name"])
      transform/k8-cluster-metric-labels:
        error_mode: ignore
        metric_statements:
        - context: datapoint
          statements:
          - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
          - set(attributes["node"], resource.attributes["k8s.node.name"])
          - set(attributes["container_image"], resource.attributes["container.image.name"])
          - set(attributes["container_image_tag"], resource.attributes["container.image.tag"])
          - set(attributes["pod"], resource.attributes["k8s.pod.name"])
          - set(attributes["container"], resource.attributes["k8s.container.name"])
          - set(attributes["replicaset"], resource.attributes["k8s.replicaset.name"])
          - set(attributes["replicationcontroller"], resource.attributes["k8s.replicationcontroller.name"])
          - set(attributes["resourcequota"], resource.attributes["k8s.resourcequota.name"])
          - set(attributes["statefulset"], resource.attributes["k8s.statefulset.name"])
          - set(attributes["deployment"], resource.attributes["k8s.deployment.name"])
          - set(attributes["daemonset"], resource.attributes["k8s.daemonset.name"])
          - set(attributes["hpa"], resource.attributes["k8s.hpa.name"])
          - set(attributes["job"], resource.attributes["k8s.job.name"])

    exporters:
      debug:
        verbosity: detailed
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true

    service:
      extensions:
      - health_check
      pipelines:
        metrics/kubelets:
          receivers:
          - kubeletstats
          processors:
          - transform/kubelet-metric-labels
          exporters:
          - otlphttp/prometheus
        metrics/k8s-cluster:
          receivers:
          - k8s_cluster
          processors:
          - transform/k8-cluster-metric-labels
          exporters:
          - otlphttp/prometheus
